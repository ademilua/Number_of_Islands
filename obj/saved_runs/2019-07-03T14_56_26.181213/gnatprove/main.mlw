(* Module for defining the constant "default_priority" defined at system.ads:112, created in Gnat2Why.Decls.Translate_Constant *)
module System__default_priority
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant default_priority [#"system.ads" 112 0 0][@name:Default_Priority] [@model_trace:7351] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the value of constant "default_priority" defined at system.ads:112, created in Gnat2Why.Decls.Translate_Constant_Value *)
module System__default_priority___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        System__default_priority as System__default_priority

 axiom default_priority__def_axiom :
  ((System__default_priority.default_priority ) = (48 : int))

end

(* Module for defining the constant "n" defined at main.adb:6, created in Gnat2Why.Decls.Translate_Constant *)
module Main__n
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant n [#"main.adb" 6 0 0][@model_trace:2317] [@name:N] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the value of constant "n" defined at main.adb:6, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__n___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__n as Main__n

 axiom n__def_axiom :
  ((Main__n.n ) = (4 : int))

end

(* Module for defining the constant "m" defined at main.adb:7, created in Gnat2Why.Decls.Translate_Constant *)
module Main__m
 use        "_gnatprove_standard".Main
 use        "int".Int

 val constant m [#"main.adb" 7 0 0][@model_trace:2327] [@name:M] 
   : int

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the value of constant "m" defined at main.adb:7, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__m___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__m as Main__m

 axiom m__def_axiom :
  ((Main__m.m ) = (5 : int))

end

(* Module for axiomatizing type "int_needed" defined at main.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Main__int_needed
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type int_needed =
  < range 0 1 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (1 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = int_needed, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type int_needed__ref =
  { mutable int_needed__content : int_needed }
 
 function int_needed__ref_int_needed__content__projection 
   (a : int_needed__ref) : int_needed =
  a.int_needed__content
 
 meta "model_projection" function int_needed__ref_int_needed__content__projection
 
 meta "inline:no" function int_needed__ref_int_needed__content__projection
 
 val int_needed__havoc 
   (x : int_needed__ref) : unit
  writes {x}

end

(* Module giving axioms for type "int_needed" defined at main.adb:11, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__int_needed___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__int_needed as Main__int_needed

 predicate dynamic_invariant [@inline] 
   (temp___expr_227 : int) (temp___is_init_223 : bool) (temp___skip_constant_224 : bool) (temp___do_toplevel_225 : bool) (temp___do_typ_inv_226 : bool) =
  (if (( temp___is_init_223 \/ (Main__int_needed.first <= Main__int_needed.last) )) then (
   (Main__int_needed.dynamic_property Main__int_needed.first Main__int_needed.last temp___expr_227)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_227 : int) (temp___is_init_223 : bool) (temp___skip_constant_224 : bool) (temp___do_toplevel_225 : bool) (temp___do_typ_inv_226 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_227 : int) (temp___is_init_223 : bool) (temp___skip_constant_224 : bool) (temp___do_toplevel_225 : bool) (temp___do_typ_inv_226 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_228 : int) (temp___skip_top_level_229 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_228 : int) (temp___skip_top_level_229 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_228 : int) (temp___skip_top_level_229 : bool) }

end

(* Module defining to_rep/of_rep for type "int_needed" defined at main.adb:11, created in Gnat2Why.Types.Translate_Type *)
module Main__int_needed__rep
 use        Main__int_needed as Main__int_needed
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Main__int_needed.int_needed) : int =
  (Main__int_needed.int_needed'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Main__int_needed.int_needed, 
 predicate in_range = Main__int_needed.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TmapB" defined at main.adb:13, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int_Int__Main__int_needed
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__int_needed as Main__int_needed
 use        Main__int_needed__rep as Main__int_needed__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 function index_I2_one 
   : int =
  (1 : int)
 
 type component_type =
  Main__int_needed.int_needed
 
 clone export "_gnatprove_standard".Array__2 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type I2.t = int, 
 predicate I2.le = Int.(<=), 
 predicate I2.lt = Int.(<), 
 predicate I2.gt = Int.(>), 
 function I2.add = Int.(+), 
 function I2.sub = Int.(-), 
 function I2.one = index_I2_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (a__first_2 : int) (a__last_2 : int) (b : map) (b__first : int) (b__last : int) (b__first_2 : int) (b__last_2 : int) : bool =
  ( ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (if ((a__first_2 <= a__last_2)) then (
   ( (b__first_2 <= b__last_2) /\ ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)) )) else (
   (b__first_2 > b__last_2))) ) /\ (forall temp___idx_156   temp___idx_157   : int.
   (if (( ( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) ) /\ ( (a__first_2 <= temp___idx_157) /\ (temp___idx_157 <= a__last_2) ) )) then (
    ((Main__int_needed__rep.to_rep (get a temp___idx_156 temp___idx_157)) = (Main__int_needed__rep.to_rep (get b ((b__first - a__first) + temp___idx_156) ((b__first_2 - a__first_2) + temp___idx_157))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (a__first_2 : int) (a__last_2 : int) (b : map) (b__first : int) (b__last : int) (b__first_2 : int) (b__last_2 : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (a__first_2 : int) (a__last_2 : int) (b : map) (b__first : int) (b__last : int) (b__first_2 : int) (b__last_2 : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   a__first_2   a__last_2   b__first   b__last   b__first_2   b__last_2   : int.
   ( ((bool_eq b b__first b__last b__first_2 b__last_2 a a__first a__last a__first_2 a__last_2) = True) -> ( ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (if ((a__first_2 <= a__last_2)) then (
    ( (b__first_2 <= b__last_2) /\ ((a__last_2 - a__first_2) = (b__last_2 - b__first_2)) )) else (
    (b__first_2 > b__last_2))) ) /\ (forall temp___idx_156   temp___idx_157   : int.
    (if (( ( (a__first <= temp___idx_156) /\ (temp___idx_156 <= a__last) ) /\ ( (a__first_2 <= temp___idx_157) /\ (temp___idx_157 <= a__last_2) ) )) then (
     ((Main__int_needed__rep.to_rep (get a temp___idx_156 temp___idx_157)) = (Main__int_needed__rep.to_rep (get b ((b__first - a__first) + temp___idx_156) ((b__first_2 - a__first_2) + temp___idx_157))))) else true)) ) )))

end

(* Module for declaring an abstract function for the aggregate at main.adb:34, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__map_array__aggregate_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed

 val function main__map_array__aggregate_def 
   (temp___159 : int) (temp___160 : int) (temp___161 : int) (temp___162 : int) (temp___163 : int) (temp___164 : int) (temp___165 : int) (temp___166 : int) (temp___167 : int) (temp___168 : int) (temp___169 : int) (temp___170 : int) (temp___171 : int) (temp___172 : int) (temp___173 : int) (temp___174 : int) (temp___175 : int) (temp___176 : int) (temp___177 : int) (temp___178 : int) : Array__Int_Int__Main__int_needed.map

end

(* Module for defining the value of the aggregate at main.adb:34, created in Gnat2Why.Expr.Transform_Aggregate.Generate_Logic_Function *)
module Main__map_array__aggregate_def___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__int_needed as Main__int_needed
 use        Main__int_needed___axiom as Main__int_needed___axiom
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed
 use        Main__map_array__aggregate_def as Main__map_array__aggregate_def
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed

 axiom def_axiom :
  (forall temp___159   temp___160   temp___161   temp___162   temp___163   temp___164   temp___165   temp___166   temp___167   temp___168   temp___169   temp___170   temp___171   temp___172   temp___173   temp___174   temp___175   temp___176   temp___177   temp___178   : int.
   (let temp___158 [@mlw:proxy_symbol] [@introduced]  = (Main__map_array__aggregate_def.main__map_array__aggregate_def temp___159 temp___160 temp___161 temp___162 temp___163 temp___164 temp___165 temp___166 temp___167 temp___168 temp___169 temp___170 temp___171 temp___172 temp___173 temp___174 temp___175 temp___176 temp___177 temp___178) in (
    (if (( ( (Main__int_needed___axiom.dynamic_invariant temp___159 True True True True) /\ (Main__int_needed___axiom.dynamic_invariant temp___160 True True True True) )/\( ( ( ( ( (Main__int_needed___axiom.dynamic_invariant temp___161 True True True True)/\(Main__int_needed___axiom.dynamic_invariant temp___162 True True True True) )/\(Main__int_needed___axiom.dynamic_invariant temp___163 True True True True) )/\( (Main__int_needed___axiom.dynamic_invariant temp___164 True True True True)/\(Main__int_needed___axiom.dynamic_invariant temp___165 True True True True) ) )/\( ( (Main__int_needed___axiom.dynamic_invariant temp___166 True True True True)/\(Main__int_needed___axiom.dynamic_invariant temp___167 True True True True) )/\( (Main__int_needed___axiom.dynamic_invariant temp___168 True True True True)/\(Main__int_needed___axiom.dynamic_invariant temp___169 True True True True) ) ) )/\( ( ( ( (Main__int_needed___axiom.dynamic_invariant temp___170 True True True True)/\(Main__int_needed___axiom.dynamic_invariant temp___171 True True True True) )/\(Main__int_needed___axiom.dynamic_invariant temp___172 True True True True) )/\( (Main__int_needed___axiom.dynamic_invariant temp___173 True True True True)/\(Main__int_needed___axiom.dynamic_invariant temp___174 True True True True) ) )/\( ( (Main__int_needed___axiom.dynamic_invariant temp___175 True True True True)/\(Main__int_needed___axiom.dynamic_invariant temp___176 True True True True) )/\( (Main__int_needed___axiom.dynamic_invariant temp___177 True True True True)/\(Main__int_needed___axiom.dynamic_invariant temp___178 True True True True) ) ) ) ) )) then (
     ( ( ( ( ((Array__Int_Int__Main__int_needed.get temp___158 (1 : int) (1 : int)) = ( 0 : Main__int_needed.int_needed )) /\ ((Array__Int_Int__Main__int_needed.get temp___158 (1 : int) (2 : int)) = ( 0 : Main__int_needed.int_needed )) )/\( ( ((Array__Int_Int__Main__int_needed.get temp___158 (1 : int) (3 : int)) = ( 0 : Main__int_needed.int_needed ))/\((Array__Int_Int__Main__int_needed.get temp___158 (1 : int) (4 : int)) = ( 1 : Main__int_needed.int_needed )) )/\((Array__Int_Int__Main__int_needed.get temp___158 (1 : int) (5 : int)) = ( 1 : Main__int_needed.int_needed )) ) ) /\ ( ( ((Array__Int_Int__Main__int_needed.get temp___158 (2 : int) (1 : int)) = ( 1 : Main__int_needed.int_needed )) /\ ((Array__Int_Int__Main__int_needed.get temp___158 (2 : int) (2 : int)) = ( 0 : Main__int_needed.int_needed )) )/\( ( ((Array__Int_Int__Main__int_needed.get temp___158 (2 : int) (3 : int)) = ( 1 : Main__int_needed.int_needed ))/\((Array__Int_Int__Main__int_needed.get temp___158 (2 : int) (4 : int)) = ( 1 : Main__int_needed.int_needed )) )/\((Array__Int_Int__Main__int_needed.get temp___158 (2 : int) (5 : int)) = ( 1 : Main__int_needed.int_needed )) ) ) )/\( ( ( ((Array__Int_Int__Main__int_needed.get temp___158 (3 : int) (1 : int)) = ( 1 : Main__int_needed.int_needed )) /\ ((Array__Int_Int__Main__int_needed.get temp___158 (3 : int) (2 : int)) = ( 1 : Main__int_needed.int_needed )) )/\( ( ((Array__Int_Int__Main__int_needed.get temp___158 (3 : int) (3 : int)) = ( 0 : Main__int_needed.int_needed ))/\((Array__Int_Int__Main__int_needed.get temp___158 (3 : int) (4 : int)) = ( 1 : Main__int_needed.int_needed )) )/\((Array__Int_Int__Main__int_needed.get temp___158 (3 : int) (5 : int)) = ( 1 : Main__int_needed.int_needed )) ) )/\( ( ((Array__Int_Int__Main__int_needed.get temp___158 (4 : int) (1 : int)) = ( 1 : Main__int_needed.int_needed )) /\ ((Array__Int_Int__Main__int_needed.get temp___158 (4 : int) (2 : int)) = ( 0 : Main__int_needed.int_needed )) )/\( ( ((Array__Int_Int__Main__int_needed.get temp___158 (4 : int) (3 : int)) = ( 1 : Main__int_needed.int_needed ))/\((Array__Int_Int__Main__int_needed.get temp___158 (4 : int) (4 : int)) = ( 1 : Main__int_needed.int_needed )) )/\((Array__Int_Int__Main__int_needed.get temp___158 (4 : int) (5 : int)) = ( 1 : Main__int_needed.int_needed )) ) ) ) )) else true)))
  )

end

(* Module for defining the constant "map_array" defined at main.adb:34, created in Gnat2Why.Decls.Translate_Constant *)
module Main__map_array
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed

 val constant map_array [#"main.adb" 34 0 0][@model_projected] [@name:Map_Array] [@model_trace:2490] 
   : Array__Int_Int__Main__int_needed.map

 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining the value of constant "map_array" defined at main.adb:34, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Main__map_array___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__map_array as Main__map_array
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed
 use        Main__map_array__aggregate_def as Main__map_array__aggregate_def
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed

 axiom map_array__def_axiom :
  ((Main__map_array.map_array ) = (Main__map_array__aggregate_def.main__map_array__aggregate_def (0 : int) (0 : int) (0 : int) (1 : int) (1 : int) (1 : int) (0 : int) (1 : int) (1 : int) (1 : int) (1 : int) (1 : int) (0 : int) (1 : int) (1 : int) (1 : int) (0 : int) (1 : int) (1 : int) (1 : int)))

end

(* Module for possibly declaring a logic function for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__line_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function line_length__2 
   (ada___ada__text_io__standard_in : Main.__private) (ada___ada__text_io__file_system : Main.__private) (ada___ada__text_io__standard_out : Main.__private) (ada___ada__text_io__standard_err : Main.__private) (ada___ada__text_io__current_in : Main.__private) (ada___ada__text_io__current_out : Main.__private) (ada___ada__text_io__current_err : Main.__private) : int
 
 val predicate line_length__2__function_guard 
   (temp___result_154 : int) (ada___ada__text_io__standard_in : Main.__private) (ada___ada__text_io__file_system : Main.__private) (ada___ada__text_io__standard_out : Main.__private) (ada___ada__text_io__standard_err : Main.__private) (ada___ada__text_io__current_in : Main.__private) (ada___ada__text_io__current_out : Main.__private) (ada___ada__text_io__current_err : Main.__private)

end

(* Module for axiomatizing type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Translate_Type *)
module Ada___ada__text_io__count
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type count =
  < range 0 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = count, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type count__ref =
  { mutable count__content : count }
 
 function count__ref_count__content__projection 
   (a : count__ref) : count =
  a.count__content
 
 meta "model_projection" function count__ref_count__content__projection
 
 meta "inline:no" function count__ref_count__content__projection
 
 val count__havoc 
   (x : count__ref) : unit
  writes {x}

end

(* Module giving axioms for type "count" defined at a-textio.ads:77, created in Gnat2Why.Types.Generate_Type_Completion *)
module Ada___ada__text_io__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Ada___ada__text_io__count as Ada___ada__text_io__count

 predicate dynamic_invariant [@inline] 
   (temp___expr_185 : int) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool) =
  (if (( temp___is_init_181 \/ (Ada___ada__text_io__count.first <= Ada___ada__text_io__count.last) )) then (
   (Ada___ada__text_io__count.dynamic_property Ada___ada__text_io__count.first Ada___ada__text_io__count.last temp___expr_185)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_185 : int) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_185 : int) (temp___is_init_181 : bool) (temp___skip_constant_182 : bool) (temp___do_toplevel_183 : bool) (temp___do_typ_inv_184 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_186 : int) (temp___skip_top_level_187 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_186 : int) (temp___skip_top_level_187 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_186 : int) (temp___skip_top_level_187 : bool) }

end

(* Module declaring the external object "ada___ada__text_io__standard_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_in  : Main.__private__ref 

end

(* Module declaring the external object "ada___ada__text_io__file_system," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__file_system
 use        "_gnatprove_standard".Main
 use        "int".Int

 val file_system  : Main.__private__ref 

end

(* Module declaring the external object "ada___ada__text_io__standard_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_out  : Main.__private__ref 

end

(* Module declaring the external object "ada___ada__text_io__standard_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__standard_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val standard_err  : Main.__private__ref 

end

(* Module declaring the external object "ada___ada__text_io__current_in," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_in
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_in  : Main.__private__ref 

end

(* Module declaring the external object "ada___ada__text_io__current_out," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_out
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_out  : Main.__private__ref 

end

(* Module declaring the external object "ada___ada__text_io__current_err," created in Gnat2Why.Decls.Translate_External_Object *)
module Ada___ada__text_io__current_err
 use        "_gnatprove_standard".Main
 use        "int".Int

 val current_err  : Main.__private__ref 

end

(* Module for declaring a program function (and possibly an axiom) for "line_length__2" defined at a-textio.ads:245, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__line_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
 use        Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err

 val line_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada___ada__text_io__line_length__2.line_length__2 Ada___ada__text_io__standard_in.standard_in.Main.__private__content Ada___ada__text_io__file_system.file_system.Main.__private__content Ada___ada__text_io__standard_out.standard_out.Main.__private__content Ada___ada__text_io__standard_err.standard_err.Main.__private__content Ada___ada__text_io__current_in.current_in.Main.__private__content Ada___ada__text_io__current_out.current_out.Main.__private__content Ada___ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada___ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err}
 
 axiom line_length__2__post_axiom :
  (forall ada___ada__text_io__standard_in   ada___ada__text_io__file_system   ada___ada__text_io__standard_out   ada___ada__text_io__standard_err   ada___ada__text_io__current_in   ada___ada__text_io__current_out   ada___ada__text_io__current_err   : Main.__private [(Ada___ada__text_io__line_length__2.line_length__2 ada___ada__text_io__standard_in ada___ada__text_io__file_system ada___ada__text_io__standard_out ada___ada__text_io__standard_err ada___ada__text_io__current_in ada___ada__text_io__current_out ada___ada__text_io__current_err)].
   ( true -> (let result  = (Ada___ada__text_io__line_length__2.line_length__2 ada___ada__text_io__standard_in ada___ada__text_io__file_system ada___ada__text_io__standard_out ada___ada__text_io__standard_err ada___ada__text_io__current_in ada___ada__text_io__current_out ada___ada__text_io__current_err) in (
    ( ( true /\ (Ada___ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for possibly declaring a logic function for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Ada___ada__text_io__page_length__2
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main

 val function page_length__2 
   (ada___ada__text_io__standard_in : Main.__private) (ada___ada__text_io__file_system : Main.__private) (ada___ada__text_io__standard_out : Main.__private) (ada___ada__text_io__standard_err : Main.__private) (ada___ada__text_io__current_in : Main.__private) (ada___ada__text_io__current_out : Main.__private) (ada___ada__text_io__current_err : Main.__private) : int
 
 val predicate page_length__2__function_guard 
   (temp___result_155 : int) (ada___ada__text_io__standard_in : Main.__private) (ada___ada__text_io__file_system : Main.__private) (ada___ada__text_io__standard_out : Main.__private) (ada___ada__text_io__standard_err : Main.__private) (ada___ada__text_io__current_in : Main.__private) (ada___ada__text_io__current_out : Main.__private) (ada___ada__text_io__current_err : Main.__private)

end

(* Module for declaring a program function (and possibly an axiom) for "page_length__2" defined at a-textio.ads:251, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__page_length__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
 use        Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err

 val page_length__2 
   (__void_param : unit) : int
  requires {  true }
  ensures {  ( ( (result = (Ada___ada__text_io__page_length__2.page_length__2 Ada___ada__text_io__standard_in.standard_in.Main.__private__content Ada___ada__text_io__file_system.file_system.Main.__private__content Ada___ada__text_io__standard_out.standard_out.Main.__private__content Ada___ada__text_io__standard_err.standard_err.Main.__private__content Ada___ada__text_io__current_in.current_in.Main.__private__content Ada___ada__text_io__current_out.current_out.Main.__private__content Ada___ada__text_io__current_err.current_err.Main.__private__content)) /\ true )/\(Ada___ada__text_io__count___axiom.dynamic_invariant result True False True True) ) }
  reads {Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err}
 
 axiom page_length__2__post_axiom :
  (forall ada___ada__text_io__standard_in   ada___ada__text_io__file_system   ada___ada__text_io__standard_out   ada___ada__text_io__standard_err   ada___ada__text_io__current_in   ada___ada__text_io__current_out   ada___ada__text_io__current_err   : Main.__private [(Ada___ada__text_io__page_length__2.page_length__2 ada___ada__text_io__standard_in ada___ada__text_io__file_system ada___ada__text_io__standard_out ada___ada__text_io__standard_err ada___ada__text_io__current_in ada___ada__text_io__current_out ada___ada__text_io__current_err)].
   ( true -> (let result  = (Ada___ada__text_io__page_length__2.page_length__2 ada___ada__text_io__standard_in ada___ada__text_io__file_system ada___ada__text_io__standard_out ada___ada__text_io__standard_err ada___ada__text_io__current_in ada___ada__text_io__current_out ada___ada__text_io__current_err) in (
    ( ( true /\ (Ada___ada__text_io__count___axiom.dynamic_invariant result True False True True) )/\true )))
    ))

end

(* Module for declaring a program function (and possibly an axiom) for "main" defined at main.adb:2, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Main___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err

 val main 
   (__void_param : unit) : unit
  requires {  true }
  ensures {  true }
  reads {Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err}
  writes {Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err}

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (( -2147483648) : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content : integer }
 
 function integer__ref_integer__content__projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref_integer__content__projection
 
 meta "inline:no" function integer__ref_integer__content__projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type positive =
  < range 1 2147483647 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (2147483647 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content : positive }
 
 function positive__ref_positive__content__projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref_positive__content__projection
 
 meta "inline:no" function positive__ref_positive__content__projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type character 
 
 val constant first 
   : int
  ensures { result =  (0 : int) }
 
 val constant last 
   : int
  ensures { result =  (255 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content : character }
 
 function character__ref_character__content__projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref_character__content__projection
 
 meta "inline:no" function character__ref_character__content__projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character as Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int

 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep

 function index_I1_one 
   : int =
  (1 : int)
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with axiom .,
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 val bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool
  ensures { result = bool_eq (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) }
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer as Standard__integer
 use        "_gnatprove_standard".Main
 use        "int".Int

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with axiom .,
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline:no" function to_rep

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer
 use        Standard__positive as Standard__positive
 use        Standard__character as Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer__rep as Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with axiom .,
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline:no" function to_array
 
 meta "model_projection" function first
 
 meta "inline:no" function first
 
 meta "model_projection" function last
 
 meta "inline:no" function last
 
 type string__ref =
  { mutable string__content : string }
 
 function string__ref_string__content__projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref_string__content__projection
 
 meta "inline:no" function string__ref_string__content__projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for declaring a program function (and possibly an axiom) for "put_line__2" defined at a-textio.ads:508, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Ada___ada__text_io__put_line__2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        Standard__string as Standard__string
 use        Ada___ada__text_io__line_length__2 as Ada___ada__text_io__line_length__2
 use        Ada___ada__text_io__page_length__2 as Ada___ada__text_io__page_length__2
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err
 use        Ada___ada__text_io__standard_in as Ada___ada__text_io__standard_in
 use        Ada___ada__text_io__file_system as Ada___ada__text_io__file_system
 use        Ada___ada__text_io__standard_out as Ada___ada__text_io__standard_out
 use        Ada___ada__text_io__standard_err as Ada___ada__text_io__standard_err
 use        Ada___ada__text_io__current_in as Ada___ada__text_io__current_in
 use        Ada___ada__text_io__current_out as Ada___ada__text_io__current_out
 use        Ada___ada__text_io__current_err as Ada___ada__text_io__current_err

 val put_line__2 
   (item : Standard__string.string) : unit
  requires {  true }
  ensures {  ( ( [@GP_Pretty_Ada:5915] ((old (Ada___ada__text_io__line_length__2.line_length__2 Ada___ada__text_io__standard_in.standard_in.Main.__private__content Ada___ada__text_io__file_system.file_system.Main.__private__content Ada___ada__text_io__standard_out.standard_out.Main.__private__content Ada___ada__text_io__standard_err.standard_err.Main.__private__content Ada___ada__text_io__current_in.current_in.Main.__private__content Ada___ada__text_io__current_out.current_out.Main.__private__content Ada___ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada___ada__text_io__line_length__2.line_length__2 Ada___ada__text_io__standard_in.standard_in.Main.__private__content Ada___ada__text_io__file_system.file_system.Main.__private__content Ada___ada__text_io__standard_out.standard_out.Main.__private__content Ada___ada__text_io__standard_err.standard_err.Main.__private__content Ada___ada__text_io__current_in.current_in.Main.__private__content Ada___ada__text_io__current_out.current_out.Main.__private__content Ada___ada__text_io__current_err.current_err.Main.__private__content)) ) /\ ( [@GP_Pretty_Ada:5921] ((old (Ada___ada__text_io__page_length__2.page_length__2 Ada___ada__text_io__standard_in.standard_in.Main.__private__content Ada___ada__text_io__file_system.file_system.Main.__private__content Ada___ada__text_io__standard_out.standard_out.Main.__private__content Ada___ada__text_io__standard_err.standard_err.Main.__private__content Ada___ada__text_io__current_in.current_in.Main.__private__content Ada___ada__text_io__current_out.current_out.Main.__private__content Ada___ada__text_io__current_err.current_err.Main.__private__content) ) = (Ada___ada__text_io__page_length__2.page_length__2 Ada___ada__text_io__standard_in.standard_in.Main.__private__content Ada___ada__text_io__file_system.file_system.Main.__private__content Ada___ada__text_io__standard_out.standard_out.Main.__private__content Ada___ada__text_io__standard_err.standard_err.Main.__private__content Ada___ada__text_io__current_in.current_in.Main.__private__content Ada___ada__text_io__current_out.current_out.Main.__private__content Ada___ada__text_io__current_err.current_err.Main.__private__content)) ) ) }
  reads {Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err}
  writes {Ada___ada__text_io__standard_in.standard_in, Ada___ada__text_io__file_system.file_system, Ada___ada__text_io__standard_out.standard_out, Ada___ada__text_io__standard_err.standard_err, Ada___ada__text_io__current_in.current_in, Ada___ada__text_io__current_out.current_out, Ada___ada__text_io__current_err.current_err}

end

(* Module defining to_string/of_string functions, created in Gnat2Why.Types.Translate_Type *)
module Standard_String__Img
 use        "int".Int
 use        Standard__string as Standard__string
 use        "_gnatprove_standard".Main
 use        "int".Int

 val function to_string 
   (x : Main.__image) (s : int) : Standard__string.string
 
 val function from_string 
   (x : Standard__string.string) : Main.__image
 
 axiom to_string__first :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ((Standard__string.first (to_string x s)) = (1 : int))))
 
 axiom to_string__length :
  (forall x   : Main.__image.
  (forall s   : int [(to_string x s)].
   ( (s >= (0 : int)) -> ((Standard__string.length (to_string x s)) <= s) )))

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__integer as Standard__integer

 predicate dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_19 : int) (temp___skip_top_level_20 : bool) }

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Array__Int__Standard__character as Array__Int__Standard__character

 function index_Index_one 
   : int =
  (1 : int)
 
 clone export "_gnatprove_standard".Array__1__Concat with axiom .,
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for defining a ref holding the value of variable "C7b" defined at main.adb:40, created in Gnat2Why.Decls.Translate_Variable *)
module Main__C7b
 use        "_gnatprove_standard".Main
 use        "int".Int

 val c7b [#"main.adb" 40 0 0] : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining a ref holding the value of variable "count" defined at main.adb:17 instantiated at main.adb:40, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B9b__count
 use        "_gnatprove_standard".Main
 use        "int".Int

 val count [#"main.adb" 17 0 0][@model_trace:18129] [@model_projected] [@name:Count]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining a ref holding the value of variable "i" defined at main.adb:20 instantiated at main.adb:40, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B9b__L_1__i
 use        "_gnatprove_standard".Main
 use        "int".Int

 val i [#"main.adb" 20 0 0][@name:i] [@model_projected] [@model_trace:18274]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for defining a ref holding the value of variable "j" defined at main.adb:21 instantiated at main.adb:40, created in Gnat2Why.Decls.Translate_Variable *)
module Main__B9b__L_2__j
 use        "_gnatprove_standard".Main
 use        "int".Int

 val j [#"main.adb" 21 0 0][@name:j] [@model_projected] [@model_trace:18286]  : int__ref 
 
 val constant attr__ATTRIBUTE_ADDRESS 
   : int


end

(* Module for axiomatizing type "n_range" defined at main.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Main__n_range
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type n_range =
  < range 1 4 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (4 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = n_range, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type n_range__ref =
  { mutable n_range__content : n_range }
 
 function n_range__ref_n_range__content__projection 
   (a : n_range__ref) : n_range =
  a.n_range__content
 
 meta "model_projection" function n_range__ref_n_range__content__projection
 
 meta "inline:no" function n_range__ref_n_range__content__projection
 
 val n_range__havoc 
   (x : n_range__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "m_range" defined at main.adb:9, created in Gnat2Why.Types.Translate_Type *)
module Main__m_range
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int

 type m_range =
  < range 1 5 >
 
 val constant first 
   : int
  ensures { result =  (1 : int) }
 
 val constant last 
   : int
  ensures { result =  (5 : int) }
 
 predicate in_range 
   (x : int) =
  ( (first <= x) /\ (x <= last) )
 val in_range 
   (x : int) : bool
  ensures { result <-> in_range (x : int) }
 
 clone export "ada__model".Static_Discrete with axiom .,
 type t = m_range, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type m_range__ref =
  { mutable m_range__content : m_range }
 
 function m_range__ref_m_range__content__projection 
   (a : m_range__ref) : m_range =
  a.m_range__content
 
 meta "model_projection" function m_range__ref_m_range__content__projection
 
 meta "inline:no" function m_range__ref_m_range__content__projection
 
 val m_range__havoc 
   (x : m_range__ref) : unit
  writes {x}

end

(* Module giving axioms for type "map" defined at main.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__map___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed

 predicate dynamic_invariant [@inline] 
   (temp___expr_234 : Array__Int_Int__Main__int_needed.map) (temp___is_init_230 : bool) (temp___skip_constant_231 : bool) (temp___do_toplevel_232 : bool) (temp___do_typ_inv_233 : bool) =
  true
 val dynamic_invariant [@inline] 
   (temp___expr_234 : Array__Int_Int__Main__int_needed.map) (temp___is_init_230 : bool) (temp___skip_constant_231 : bool) (temp___do_toplevel_232 : bool) (temp___do_typ_inv_233 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_234 : Array__Int_Int__Main__int_needed.map) (temp___is_init_230 : bool) (temp___skip_constant_231 : bool) (temp___do_toplevel_232 : bool) (temp___do_typ_inv_233 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_237 : Array__Int_Int__Main__int_needed.map) (temp___skip_top_level_238 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_237 : Array__Int_Int__Main__int_needed.map) (temp___skip_top_level_238 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_237 : Array__Int_Int__Main__int_needed.map) (temp___skip_top_level_238 : bool) }

end

(* Module for defining the loop exit exception for the loop "L_1" defined at main.adb:20 instantiated at main.adb:40, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__B9b__L_1
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_1

end

(* Module for defining the loop exit exception for the loop "L_2" defined at main.adb:21 instantiated at main.adb:40, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Main__B9b__L_2
 use        "_gnatprove_standard".Main
 use        "int".Int

 exception L_2

end

(* Module for defining a value for string literal  defined at main.adb:40, created in Gnat2Why.Expr.Transform_String_Literal *)
module Temp___String_Literal_251
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character
 use        Standard__character__rep as Standard__character__rep
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character

 val function temp___String_Literal_251 
   (__void_param : unit) : Array__Int__Standard__character.map
 
 axiom temp___String_Literal_251__def_axiom :
  (forall __void_param   : unit [(temp___String_Literal_251 __void_param)].
   ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (1 : int))) = (84 : int)) /\ ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (2 : int))) = (104 : int)) )/\( ( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (3 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (4 : int))) = (32 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (5 : int))) = (114 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (6 : int))) = (101 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (7 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (8 : int))) = (117 : int)) ) )/\( ( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (9 : int))) = (108 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (10 : int))) = (116 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (11 : int))) = (32 : int)) )/\( ( ((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (12 : int))) = (105 : int))/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (13 : int))) = (115 : int)) )/\((Standard__character__rep.to_rep (Array__Int__Standard__character.get (temp___String_Literal_251 __void_param) (14 : int))) = (58 : int)) ) ) ) ))

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__positive as Standard__positive

 predicate dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_47 : int) (temp___skip_top_level_48 : bool) }

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Standard__character as Standard__character

 predicate dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_75 : int) (temp___skip_top_level_76 : bool) }

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        Standard__positive as Standard__positive
 use        Standard__string as Standard__string

 predicate dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))
 val dynamic_invariant [@inline] 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool) }

end

(* Module giving axioms for type "n_range" defined at main.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__n_range___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__n_range as Main__n_range

 predicate dynamic_invariant [@inline] 
   (temp___expr_213 : int) (temp___is_init_209 : bool) (temp___skip_constant_210 : bool) (temp___do_toplevel_211 : bool) (temp___do_typ_inv_212 : bool) =
  (if (( temp___is_init_209 \/ (Main__n_range.first <= Main__n_range.last) )) then (
   (Main__n_range.dynamic_property Main__n_range.first Main__n_range.last temp___expr_213)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_213 : int) (temp___is_init_209 : bool) (temp___skip_constant_210 : bool) (temp___do_toplevel_211 : bool) (temp___do_typ_inv_212 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_213 : int) (temp___is_init_209 : bool) (temp___skip_constant_210 : bool) (temp___do_toplevel_211 : bool) (temp___do_typ_inv_212 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_214 : int) (temp___skip_top_level_215 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_214 : int) (temp___skip_top_level_215 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_214 : int) (temp___skip_top_level_215 : bool) }

end

(* Module giving axioms for type "m_range" defined at main.adb:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Main__m_range___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        Main__m_range as Main__m_range

 predicate dynamic_invariant [@inline] 
   (temp___expr_220 : int) (temp___is_init_216 : bool) (temp___skip_constant_217 : bool) (temp___do_toplevel_218 : bool) (temp___do_typ_inv_219 : bool) =
  (if (( temp___is_init_216 \/ (Main__m_range.first <= Main__m_range.last) )) then (
   (Main__m_range.dynamic_property Main__m_range.first Main__m_range.last temp___expr_220)) else true)
 val dynamic_invariant [@inline] 
   (temp___expr_220 : int) (temp___is_init_216 : bool) (temp___skip_constant_217 : bool) (temp___do_toplevel_218 : bool) (temp___do_typ_inv_219 : bool) : bool
  ensures { result <-> dynamic_invariant (temp___expr_220 : int) (temp___is_init_216 : bool) (temp___skip_constant_217 : bool) (temp___do_toplevel_218 : bool) (temp___do_typ_inv_219 : bool) }
 
 predicate default_initial_assumption [@inline] 
   (temp___expr_221 : int) (temp___skip_top_level_222 : bool) =
  true
 val default_initial_assumption [@inline] 
   (temp___expr_221 : int) (temp___skip_top_level_222 : bool) : bool
  ensures { result <-> default_initial_assumption (temp___expr_221 : int) (temp___skip_top_level_222 : bool) }

end

(* Module giving an empty axiom for the entity "count" defined at main.adb:17 instantiated at main.adb:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B9b__count___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving an empty axiom for the entity "L_2" defined at main.adb:21 instantiated at main.adb:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B9b__L_2___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving an empty axiom for the entity "L_1" defined at main.adb:20 instantiated at main.adb:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B9b__L_1___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving an empty axiom for the entity "i" defined at main.adb:20 instantiated at main.adb:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B9b__L_1__i___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving an empty axiom for the entity "j" defined at main.adb:21 instantiated at main.adb:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__B9b__L_2__j___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module giving an empty axiom for the entity "C7b" defined at main.adb:40, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Main__C7b___axiom
 use        "_gnatprove_standard".Main
 use        "int".Int


end

(* Module for checking contracts and absence of run-time errors in subprogram "main" defined at main.adb:2, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Main__subprogram_def
 use        "_gnatprove_standard".Main
 use        "int".Int
 use        "int".Int
 use        "_gnatprove_standard".Main as Main
 use        "_gnatprove_standard".Integer as Integer
 use        "_gnatprove_standard".Boolean as Boolean
 use        Standard_String__Img as Standard_String__Img
 use        Standard__integer as Standard__integer
 use        Standard__integer as Standard__integer
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive as Standard__positive
 use        Array__Int__Standard__character__Concat as Array__Int__Standard__character__Concat
 use        Standard__string as Standard__string
 use        Main__n as Main__n
 use        Main__m as Main__m
 use        Main__map_array as Main__map_array
 use        Main__C7b as Main__C7b
 use        Main__B9b__count as Main__B9b__count
 use        Main__B9b__L_1__i as Main__B9b__L_1__i
 use        Main__B9b__L_2__j as Main__B9b__L_2__j
 use        Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
 use        Main__n_range as Main__n_range
 use        Main__m_range as Main__m_range
 use        Main__int_needed as Main__int_needed
 use        Main__int_needed__rep as Main__int_needed__rep
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed
 use        Main__map___axiom as Main__map___axiom
 use        Main__map_array__aggregate_def as Main__map_array__aggregate_def
 use        Main__B9b__L_1 as Main__B9b__L_1
 use        Main__B9b__L_2 as Main__B9b__L_2
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed
 use        Array__Int_Int__Main__int_needed as Array__Int_Int__Main__int_needed
 use        Temp___String_Literal_251 as Temp___String_Literal_251
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Array__Int__Standard__character as Array__Int__Standard__character
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Standard__positive___axiom as Standard__positive___axiom
 use        Standard__character___axiom as Standard__character___axiom
 use        Standard__string___axiom as Standard__string___axiom
 use        Standard__integer___axiom as Standard__integer___axiom
 use        Main__n___axiom as Main__n___axiom
 use        Main__m___axiom as Main__m___axiom
 use        Main__n_range___axiom as Main__n_range___axiom
 use        Main__m_range___axiom as Main__m_range___axiom
 use        Main__int_needed___axiom as Main__int_needed___axiom
 use        Main__map___axiom as Main__map___axiom
 use        Main__map_array___axiom as Main__map_array___axiom
 use        Main__map_array__aggregate_def___axiom as Main__map_array__aggregate_def___axiom
 use        Ada___ada__text_io__count___axiom as Ada___ada__text_io__count___axiom
 use        Ada___ada__text_io__line_length__2___axiom as Ada___ada__text_io__line_length__2___axiom
 use        Ada___ada__text_io__page_length__2___axiom as Ada___ada__text_io__page_length__2___axiom
 use        Ada___ada__text_io__put_line__2___axiom as Ada___ada__text_io__put_line__2___axiom
 use        Main__B9b__count___axiom as Main__B9b__count___axiom
 use        Main__B9b__L_2___axiom as Main__B9b__L_2___axiom
 use        Main__B9b__L_1___axiom as Main__B9b__L_1___axiom
 use        Main__B9b__L_1__i___axiom as Main__B9b__L_1__i___axiom
 use        Main__B9b__L_2__j___axiom as Main__B9b__L_2__j___axiom
 use        Main__C7b___axiom as Main__C7b___axiom

 let def [#"main.adb" 2 0 0][@GP_Subp:main.adb:2] 
   (__void_param : unit)
  requires { [#"main.adb" 2 0 0] true }
   = [@vc:divergent]
  ( () (* Assume dynamic invariants of inputs of the subprogram main.adb:2 *)
  ;
  () (* Declarations introduced by the compiler at the beginning of the subprogram main.adb:2 *)
  ;
  () (* Check for RTE in the Pre of the subprogram main.adb:2 *)
  ;
  [#"main.adb" 2 0 0] begin ensures {true} let _ = (let _  = True in (
   ()))
   in () end ;
  () (* Assume Pre of the subprogram main.adb:2 *)
  ;
  [#"main.adb" 2 0 0] try
   ( ();
   ([#"main.adb" 3 0 0] ());
   ([#"main.adb" 6 0 0] ( [#"main.adb" 6 0 0] begin ensures {true} let _ = (let _  = (4 : int) in (
    ()))
    in () end ;
   [#"main.adb" 6 0 0] assume { [#"main.adb" 6 0 0] (Standard__integer___axiom.dynamic_invariant Main__n.n True False True True) } ));
   ([#"main.adb" 7 0 0] ( [#"main.adb" 7 0 0] begin ensures {true} let _ = (let _  = (5 : int) in (
    ()))
    in () end ;
   [#"main.adb" 7 0 0] assume { [#"main.adb" 7 0 0] (Standard__integer___axiom.dynamic_invariant Main__m.m True False True True) } ));
   ([#"main.adb" 8 0 0] ());
   ([#"main.adb" 9 0 0] ());
   ([#"main.adb" 11 0 0] ());
   ([#"main.adb" 13 0 0] ());
   ([#"main.adb" 13 0 0] ());
   ([#"main.adb" 13 0 0] ());
   ([#"main.adb" 13 0 0] ());
   ([#"main.adb" 13 0 0] ());
   ([#"main.adb" 15 0 0] ());
   ([#"main.adb" 15 0 0] ());
   ([#"main.adb" 15 0 0] ());
   ([#"main.adb" 34 0 0] ( (let main__map_array__assume  = (Main__map_array__aggregate_def.main__map_array__aggregate_def((0 : int)) ((0 : int)) ((0 : int)) ((1 : int)) ((1 : int)) ((1 : int)) ((0 : int)) ((1 : int)) ((1 : int)) ((1 : int)) ((1 : int)) ((1 : int)) ((0 : int)) ((1 : int)) ((1 : int)) ((1 : int)) ((0 : int)) ((1 : int)) ((1 : int)) ((1 : int))) in (
    [#"main.adb" 34 0 0] assume { [#"main.adb" 34 0 0] (main__map_array__assume = Main__map_array.map_array) }))
   ;
   [#"main.adb" 34 0 0] assume { [#"main.adb" 34 0 0] (Main__map___axiom.dynamic_invariant Main__map_array.map_array True False True True) } ));
   ();
   ( [@GP_Sloc:main.adb:40:32] ([#"main.adb" 40 0 0] ()) );
   ( [@GP_Sloc:main.adb:40:32] ([#"main.adb" 40 0 0] ()) );
   ( [@GP_Sloc:main.adb:40:32] ([#"main.adb" 40 0 0] ([#"main.adb" 40 0 0] ( [#"main.adb" 40 0 0] assume { [#"main.adb" 40 0 0] (Standard__integer___axiom.default_initial_assumption Main__C7b.c7b.int__content False) };
   [#"main.adb" 40 0 0] assume { [#"main.adb" 40 0 0] (Standard__integer___axiom.dynamic_invariant Main__C7b.c7b.int__content False False True True) } ))) );
   ( [@GP_Sloc:main.adb:40:32] ([#"main.adb" 40 0 0] ( ();
   ([#"main.adb" 17 0 0] ( [#"main.adb" 17 0 0] (Main__B9b__count.count.int__content <- ( (0 : int) ));
   [#"main.adb" 17 0 0] assume { [#"main.adb" 17 0 0] (Standard__integer___axiom.dynamic_invariant Main__B9b__count.count.int__content True False True True) } ));
   ([#"main.adb" 21 0 0] ());
   ([#"main.adb" 20 0 0] ());
   ();
   ( [@GP_Sloc:main.adb:20:24:inlined:main.adb:40:32] ([#"main.adb" 20 0 0] (let temp___243 [@mlw:proxy_symbol] [@introduced]  = (1 : int) in (
   (let temp___244 [@mlw:proxy_symbol] [@introduced]  = (4 : int) in (
    ( () (* Translation of an unrolled Ada loop from main.adb:20 instantiated at main.adb:40 *)
    ;
    [#"main.adb" 20 0 0] try
     ( [#"main.adb" 20 0 0] begin ensures {true} let _ = (let _  = Main__B9b__count.count.int__content in (
      ()))
      in () end ;
     (let temp___loop_entry_250  = [#"main.adb" 20 0 0] (val _f : int
     ensures {[#"main.adb" 20 0 0] (result = Main__B9b__count.count.int__content)} 
     in _f) in (
      ( () (* Unrolling of the loop statements of loop main.adb:20 instantiated at main.adb:40 *)
      ;
      [#"main.adb" 20 0 0] (Main__B9b__L_1__i.i.int__content <- ( (1 : int) ));
      ();
      ( [@GP_Sloc:main.adb:21:27:inlined:main.adb:40:32] ([#"main.adb" 21 0 0] (let temp___245 [@mlw:proxy_symbol] [@introduced]  = (1 : int) in (
      (let temp___246 [@mlw:proxy_symbol] [@introduced]  = (5 : int) in (
       ( () (* Translation of an unrolled Ada loop from main.adb:21 instantiated at main.adb:40 *)
       ;
       [#"main.adb" 21 0 0] try
        ( [#"main.adb" 21 0 0] begin ensures {true} let _ = (let _  = Main__B9b__count.count.int__content in (
         ()))
         in () end ;
        (let temp___loop_entry_249  = [#"main.adb" 21 0 0] (val _f : int
        ensures {[#"main.adb" 21 0 0] (result = Main__B9b__count.count.int__content)} 
        in _f) in (
         ( () (* Unrolling of the loop statements of loop main.adb:21 instantiated at main.adb:40 *)
         ;
         [#"main.adb" 21 0 0] (Main__B9b__L_2__j.j.int__content <- ( (1 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (2 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (3 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (4 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (5 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) ) )))
         )
       with
        Main__B9b__L_2.L_2 -> ()
       end )))
      ))
      ) );
       (Main__B9b__L_1__i.i.int__content <- ( (2 : int) ));
      ();
      ( [@GP_Sloc:main.adb:21:27:inlined:main.adb:40:32] ([#"main.adb" 21 0 0] (let temp___245 [@mlw:proxy_symbol] [@introduced]  = (1 : int) in (
      (let temp___246 [@mlw:proxy_symbol] [@introduced]  = (5 : int) in (
       ( () (* Translation of an unrolled Ada loop from main.adb:21 instantiated at main.adb:40 *)
       ;
       [#"main.adb" 21 0 0] try
        ( [#"main.adb" 21 0 0] begin ensures {true} let _ = (let _  = Main__B9b__count.count.int__content in (
         ()))
         in () end ;
        (let temp___loop_entry_249  = [#"main.adb" 21 0 0] (val _f : int
        ensures {[#"main.adb" 21 0 0] (result = Main__B9b__count.count.int__content)} 
        in _f) in (
         ( () (* Unrolling of the loop statements of loop main.adb:21 instantiated at main.adb:40 *)
         ;
         [#"main.adb" 21 0 0] (Main__B9b__L_2__j.j.int__content <- ( (1 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (2 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (3 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (4 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (5 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) ) )))
         )
       with
        Main__B9b__L_2.L_2 -> ()
       end )))
      ))
      ) );
       (Main__B9b__L_1__i.i.int__content <- ( (3 : int) ));
      ();
      ( [@GP_Sloc:main.adb:21:27:inlined:main.adb:40:32] ([#"main.adb" 21 0 0] (let temp___245 [@mlw:proxy_symbol] [@introduced]  = (1 : int) in (
      (let temp___246 [@mlw:proxy_symbol] [@introduced]  = (5 : int) in (
       ( () (* Translation of an unrolled Ada loop from main.adb:21 instantiated at main.adb:40 *)
       ;
       [#"main.adb" 21 0 0] try
        ( [#"main.adb" 21 0 0] begin ensures {true} let _ = (let _  = Main__B9b__count.count.int__content in (
         ()))
         in () end ;
        (let temp___loop_entry_249  = [#"main.adb" 21 0 0] (val _f : int
        ensures {[#"main.adb" 21 0 0] (result = Main__B9b__count.count.int__content)} 
        in _f) in (
         ( () (* Unrolling of the loop statements of loop main.adb:21 instantiated at main.adb:40 *)
         ;
         [#"main.adb" 21 0 0] (Main__B9b__L_2__j.j.int__content <- ( (1 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (2 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (3 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (4 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (5 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) ) )))
         )
       with
        Main__B9b__L_2.L_2 -> ()
       end )))
      ))
      ) );
       (Main__B9b__L_1__i.i.int__content <- ( (4 : int) ));
      ();
      ( [@GP_Sloc:main.adb:21:27:inlined:main.adb:40:32] ([#"main.adb" 21 0 0] (let temp___245 [@mlw:proxy_symbol] [@introduced]  = (1 : int) in (
      (let temp___246 [@mlw:proxy_symbol] [@introduced]  = (5 : int) in (
       ( () (* Translation of an unrolled Ada loop from main.adb:21 instantiated at main.adb:40 *)
       ;
       [#"main.adb" 21 0 0] try
        ( [#"main.adb" 21 0 0] begin ensures {true} let _ = (let _  = Main__B9b__count.count.int__content in (
         ()))
         in () end ;
        (let temp___loop_entry_249  = [#"main.adb" 21 0 0] (val _f : int
        ensures {[#"main.adb" 21 0 0] (result = Main__B9b__count.count.int__content)} 
        in _f) in (
         ( () (* Unrolling of the loop statements of loop main.adb:21 instantiated at main.adb:40 *)
         ;
         [#"main.adb" 21 0 0] (Main__B9b__L_2__j.j.int__content <- ( (1 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (2 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (3 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (4 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) );
          (Main__B9b__L_2__j.j.int__content <- ( (5 : int) ));
         ();
         ( [@GP_Sloc:main.adb:22:13:inlined:main.adb:40:32] ([#"main.adb" 22 0 0] (if (( ([#"main.adb" 22 0 0] [#"main.adb" 22 0 0] (([@branch_id=18294] Main.spark__branch).bool__content <- ( ((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) (Main__B9b__L_2__j.j.int__content)))) = (1 : int)) )));
         ( [@branch_id=18294] Main.spark__branch ).bool__content )) then (
          ( ();
          ( [@GP_Sloc:main.adb:23:16:inlined:main.adb:40:32] ([#"main.adb" 23 0 0] (if (( ([#"main.adb" 23 0 0] [#"main.adb" 23 0 0] (([@branch_id=18301] Main.spark__branch).bool__content <- ( (Boolean.andb((Boolean.orb((Main__B9b__L_1__i.i.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) ((let temp___247 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_1__i.i.int__content - (1 : int)) in (
           ( [#"main.adb" 23 0 0] assert { [#"main.adb" 23 0 0] ([#"main.adb" 23 0 0] ( [@comment:               if ((i = 1 or Map_Array(i -1, j) = 0)                                          ^ main.adb:23:42:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Reason:VC_INDEX_CHECK] [@GP_Sloc:main.adb:23:42:inlined:main.adb:40:32] [@GP_Id:1] ( (Main__n_range.first <= temp___247) /\ (temp___247 <= Main__n_range.last) ) )) };
           temp___247 )))
          ) (Main__B9b__L_2__j.j.int__content)))) = (0 : int))))) ((Boolean.orb((Main__B9b__L_2__j.j.int__content = (1 : int))) (((Main__int_needed__rep.to_rep((Array__Int_Int__Main__int_needed.get(Main__map_array.map_array) (Main__B9b__L_1__i.i.int__content) ((let temp___248 [@mlw:proxy_symbol] [@introduced]  = (Main__B9b__L_2__j.j.int__content - (1 : int)) in (
           (  assert {  ([#"main.adb" 24 0 0] ( [@comment:                  and  (j = 1 or Map_Array(i, j- 1)= 0)) then                                                ^ main.adb:24:48:inlined:main.adb:40:32:VC_INDEX_CHECK] [@vc:annotation] [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__and__or__cmp__ixdcomp__sub] [@GP_Sloc:main.adb:24:48:inlined:main.adb:40:32] [@GP_Reason:VC_INDEX_CHECK] [@GP_Id:2] ( (Main__m_range.first <= temp___248) /\ (temp___248 <= Main__m_range.last) ) )) };
           temp___248 )))
          )))) = (0 : int)))))) )));
          ( [@branch_id=18301] Main.spark__branch ).bool__content )) then (
           ( ();
           ( [@GP_Sloc:main.adb:25:24:inlined:main.adb:40:32] ([#"main.adb" 25 0 0] [#"main.adb" 25 0 0] (Main__B9b__count.count.int__content <- ( ([#"main.adb" 25 0 0] ( [@GP_Shape:B9b_declblk__L_1_while__L_2_while__if__if__count_assign__add] [@vc:annotation] [@GP_Reason:VC_OVERFLOW_CHECK] [@comment:                 Count := Count + 1;                                 ^ main.adb:25:33:inlined:main.adb:40:32:VC_OVERFLOW_CHECK] [@GP_Sloc:main.adb:25:33:inlined:main.adb:40:32] [@GP_Id:0] (Standard__integer.range_check_((Main__B9b__count.count.int__content + (1 : int)))) )) ))) ) )) else (
           ()))) ) )) else (
          ()))) ) )))
         )
       with
        Main__B9b__L_2.L_2 -> ()
       end )))
      ))
      ) ) )))
      )
    with
     Main__B9b__L_1.L_1 -> ()
    end )))
   ))
   ) );
   ( [@GP_Sloc:main.adb:40:32] ([#"main.adb" 30 0 0] [#"main.adb" 30 0 0] (Main__C7b.c7b.int__content <- ( Main__B9b__count.count.int__content ))) ) )) );
   ( [@GP_Sloc:main.adb:40:4] ([#"main.adb" 40 0 0] ()) );
   ( [@GP_Sloc:main.adb:40:4] ([#"main.adb" 40 0 0] ( (Ada___ada__text_io__put_line__2___axiom.put_line__2((let temp___253 [@mlw:proxy_symbol] [@introduced]  = (Standard_String__Img.to_string((Standard__integer.attr__ATTRIBUTE_IMAGE(Main__C7b.c7b.int__content))) ((12 : int))) in (
   (let temp___252 [@mlw:proxy_symbol] [@introduced]  = (Temp___String_Literal_251.temp___String_Literal_251(())) in (
    (Standard__string.of_array((Array__Int__Standard__character__Concat.concat(temp___252) ((1 : int)) ((14 : int)) ((Standard__string.to_array(temp___253))) ((Standard__string.first(temp___253))) ((Standard__string.last(temp___253))))) ((1 : int)) (([#"main.adb" 40 0 0] ( [@vc:annotation] [@GP_Sloc:main.adb:40:30] [@GP_Reason:VC_RANGE_CHECK] [@comment:   Put_Line("The result is:" & Count_Islands(Map_Array)'Img);                              ^ main.adb:40:30:VC_RANGE_CHECK] [@GP_Id:3] [@GP_Shape:call_put_line__2__concat] (Standard__positive.range_check_((((1 : int) + ((Integer.length((1 : int)) ((14 : int))) + (Integer.length((Standard__string.first(temp___253))) ((Standard__string.last(temp___253)))))) - (1 : int)))) ))))))
   ))
   )) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   begin ensures {true} let _ = (let _  = True in (
   ()))
   in () end  )
end
